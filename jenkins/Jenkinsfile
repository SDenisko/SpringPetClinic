pipeline {
    agent {
       docker {
//            image 'sioj/maven-docker'
            image 'maven:3-alpine'
//             args '-v /root/.m2:/root/.m2'
            args '-v /tmp:/tmp  -v /root/.m2:/root/.m2'
            reuseNode true
        }
    }

    
    stages {
        stage('Build') {
            steps {
                sh 'mvn clean package -X'
                sh 'mvn -B -X -DskipTests clean package'

            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
             }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
       stage('Deliver') {
            steps {
                sh'chmod +x ./jenkins/scripts/deliver.sh'
                sh './jenkins/scripts/deliver.sh'
            }
        }


       stage ('Build Docker image'){
          steps {

//               docker.withRegistry("https://$registry", 'gitlab-jenkins-docker') {
//                   def app_image = docker.build("sioj/petclinic:latest .")
//                   app_image.push()

//                       }

//                  sh "apk update || apk add docker"
//              sh "docker build -t sioj/petclinic:1.0-SHAPSHOT . "
//              sh "pwd"
//              sh "ls -al"
//                sh "cd /var/lib/jenkins/workspace/petClinic"
                sh "docker build -t sioj/petclinic:1.0-SHAPSHOT . "
                }
       }

       stage ('login') {
          steps {
             withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub_PSW'), string(credentialsId: 'dockerhub', variable: 'dockerhub_USR')]) {
             sh "docker login -u ${dockerhub_USR} -p ${dockerhub_PSW}"}
             sh 'echo $dockerhub_PSW | docker login -u $dockerhub_USR --password-stdin'
                }
                     }
        stage ('push') {
            steps {
              script{
                app_image.push()
   //             sh "docker push sioj/petclinic:latest"
                   }
                  }
                 }
   //     stage ('logout') {
   //        steps {
   //            sh "docker logout"
   //              }
   //                    }

}
    post {

        success {


          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : OK *Published* = YES'
          """)
          }

    }

       aborted {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Aborted` *Published* = `Aborted`'
          """)
         }

       }

       failure {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `not OK` *Published* = `no`'
          """)
              }
            }

        }
}
