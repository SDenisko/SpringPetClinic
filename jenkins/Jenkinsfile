pipeline {
    agent none
      stages{
        stage('build and test project') {
          agent {
            docker {
//            image 'sioj/maven-docker'
            image 'maven:3-alpine'
//             args '-v /root/.m2:/root/.m2'
            args '-v /tmp:/tmp  -v /root/.m2:/root/.m2'
            reuseNode true
        }
    }
        steps {
                sh "mvn clean package"
                sh "pwd"
                sh "ls -al"
                sh "cp target/spring-*.jar ./"
            }
                                       }
   stage('Docker') {
       agent any
       steps {
                    script {
                  def app_image = docker.build("sioj/jenkins-pet-helloworld:latest")
                  withCredentials([string(credentialsId: 'Dockerhub_token', variable: 'TOKEN')]) {
                  sh "docker login -u sioj -p ${TOKEN} "
                  sh "docker push sioj/jenkins-pet-helloworld"
                  sh "docker logout"
                          }
                                                                                                 }
                  }
             }
        }

post {
  agent any
        success {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : OK *Published* = YES'
          """)
          }
    }

       aborted {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Aborted` *Published* = `Aborted`'
          """)
         }

       }

       failure {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `not OK` *Published* = `no`'
          """)
              }
            }
          }
}
