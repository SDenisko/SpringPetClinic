pipeline {
    agent none
      stages{
        stage('Build and test project') {
          agent {
            docker {
            image 'maven:3-alpine'
            args '-v /tmp:/tmp  -v /root/.m2:/root/.m2'
            reuseNode true
        }
    }
    steps {
            sh "mvn clean package"
            sh "pwd"
            sh "ls -al"
            sh "cp target/spring-*.jar ./"
            }
                                       }
   stage('Build and push to the DockerHub') {
       agent any
       steps {
                    script {
                  def app_image = docker.build("sioj/webpetclinic:latest")
                  withCredentials([string(credentialsId: 'Dockerhub_token', variable: 'TOKEN')]) {
                  sh "docker login -u sioj -p ${TOKEN} "
                  sh "docker push sioj/webpetclinic"
                  sh "docker logout"
                          }
                                                                                                 }
                  }
               }
             }

post {
       success {
         node (null){
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME} : POC Branch*: ${env.GIT_BRANCH} Build : OK Published = YES'
          """)
          }
        }
      }

       aborted {
           node (null){
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME} : POC Branch*: ${env.GIT_BRANCH} Build : `Aborted` Published = `Aborted`'
          """)
         }
        }
       }

       failure {
          node (null){
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME} : POC  Branch*: ${env.GIT_BRANCH} Build : `not OK` Published = `no`'
          """)
              }

          }
          }
}
}
